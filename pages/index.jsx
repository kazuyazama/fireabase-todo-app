import {
  addDoc,
  collection,
  deleteDoc,
  doc,
  onSnapshot,
  serverTimestamp,
  updateDoc,
} from "firebase/firestore";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import AddTodo from "../components/AddTodo";
import Todo from "../components/Todo";
import { useAuthUser } from "../context/user";
import { db } from "../firebase";
import Login from "./login";

export default function Home() {
  const [datas, setDatas] = useState([]);

  const [inputText, setInputText] = useState("");

  const authUserState = useAuthUser();

  const router = useRouter();

  useEffect(() => {
    const q = collection(db, "task");
    onSnapshot(q, (querySnapshot) => {
      const tasks = [];
      querySnapshot.docs.forEach((doc) => {
        tasks.push({
          id: doc.id,
          task: doc.data().task,
          userName: doc.data().userName,
          userId: doc.data().userId,
          coverURL: doc.data().coverURL,
          completed: doc.data().completed,
        });
      });
      setDatas(tasks);
    });
  }, ["task"]);

  const handleClick = async (e) => {
    e.preventDefault();
    if (inputText === "") return;
    const docRef = await addDoc(collection(db, "task"), {
      task: inputText,
      timestamp: serverTimestamp(),
      userName: authUserState.displayName,
      userId: authUserState.uid,
      coverURL: authUserState.photoURL,
      completed: false,
    })
      .then(() => {
        setInputText("");
        alert("投稿に成功しました");
      })
      .catch((e) => {
        alert("投稿に失敗しました");
      });
  };

  const handleUpdate = async (data, task) => {
    const docRef = doc(db, "task", data.id);
    // Set the "capital" field of the city 'DC'
    await updateDoc(docRef, {
      task: task,
    });
  };

  const handleDelete = async (data) => {
    const docRef = doc(db, "task", data.id);
    await deleteDoc(docRef);
  };

  const handleComplete = async (data) => {
    const docRTef = doc(db, "task", data.id);
    await updateDoc(docRTef, {
      completed: !data.completed,
    });
  };

  return (
    <div className=" overflow-hidden">
      <Head>
        <title>Todo App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {authUserState ? (
        <main className=" max-w-screen-xl mx-auto pt-10  w-full grid place-items-center">
          <AddTodo
            setInputText={setInputText}
            inputText={inputText}
            handleClick={handleClick}
          />
          {datas.map((data) => (
            <Todo
              key={data.id}
              data={data}
              handleUpdate={handleUpdate}
              handleDelete={handleDelete}
              handleComplete={handleComplete}
            />
          ))}
        </main>
      ) : (
        <Login />
      )}
    </div>
  );
}
