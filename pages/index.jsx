import {
  addDoc,
  collection,
  deleteDoc,
  doc,
  onSnapshot,
  serverTimestamp,
  updateDoc,
} from "firebase/firestore";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import Todo from "../components/Todo";
import { useAuthUser } from "../context/user";
import { db } from "../firebase";

export default function Home() {
  const [datas, setDatas] = useState([]);

  const [inputText, setInputText] = useState("");

  const authUserState = useAuthUser();

  const router = useRouter();

  useEffect(() => {
    const q = collection(db, "task");
    onSnapshot(q, (querySnapshot) => {
      const tasks = [];
      querySnapshot.docs.forEach((doc) => {
        tasks.push({
          id: doc.id,
          task: doc.data().task,
          userName: doc.data().userName,
          userId: doc.data().userId,
          coverURL: doc.data().coverURL,
          completed: doc.data().completed,
        });
      });
      setDatas(tasks);
    });
  }, ["task"]);


  const handleClick = async (e) => {
    e.preventDefault();
    if (inputText === "") return;
    const docRef = await addDoc(collection(db, "task"), {
      task: inputText,
      timestamp: serverTimestamp(),
      userName: authUserState.displayName,
      userId: authUserState.uid,
      coverURL: authUserState.photoURL,
      completed: false,
    })
      .then(() => {
        setInputText("");
        alert("投稿に成功しました");
      })
      .catch((e) => {
        alert("投稿に失敗しました");
      });
  };

  const handleUpdate = async (data, task) => {
    const washingtonRef = doc(db, "task", data.id);
    // Set the "capital" field of the city 'DC'
    await updateDoc(washingtonRef, {
      task: task,
    });
  };

  const handleDelete = async (data) => {
    const ref = doc(db, "task", data.id);
    await deleteDoc(ref);
  };

  const handleComplete = async (data) => {
    const ref = doc(db, "task", data.id);
    await updateDoc(ref, {
      completed: !data.completed,
    });
  };

  return (
    <div className="">
      <Head>
        <title>Todo App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className=" max-w-screen-xl mx-auto pt-10  w-full grid place-items-center">
        <form className="mb-10 flex items-center gap-2">
          <input
            type="text"
            className="w-80 h-12"
            value={inputText}
            onChange={(e) => setInputText(e.target.value)}
          />
          <button
            type="submit"
            onClick={handleClick}
            className="bg-yellow-300 px-5 h-12 rounded-xl"
          >
            追加
          </button>
        </form>

        {datas.map((data) => (
          <Todo
            key={data.id}
            data={data}
            handleUpdate={handleUpdate}
            handleDelete={handleDelete}
            handleComplete={handleComplete}
          />
        ))}
      </main>
    </div>
  );
}
